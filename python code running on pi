

import RPi.GPIO as GPIO                    #Import GPIO library
import time                                #Import time library
import socket

TCP_IP = '192.168.43.22'
TCP_PORT = 5005
BUFFER_SIZE = 20

GPIO.setmode(GPIO.BCM)                     #Set GPIO pin numbering 

TRIG = 23                                  #Associate pin 23 to TRIG
ECHO = 24                    #Associate pin 24 to ECHO
trig2 = 17
echo2 = 27

print("Distance measurement in progress")

GPIO.setup(TRIG,GPIO.OUT)                  #Set pin as GPIO out
GPIO.setup(ECHO,GPIO.IN)                   #Set pin as GPIO in

GPIO.setup(trig2,GPIO.OUT)                  #Set pin as GPIO out
GPIO.setup(echo2,GPIO.IN)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#s.connect((TCP_IP, TCP_PORT))

while True:

  GPIO.output(TRIG, False)                 #Set TRIG as LOW
  GPIO.output(trig2, False) 
  #print("Waitng For Sensor To Settle")
  time.sleep(1)                            #Delay of 2 seconds

  GPIO.output(TRIG, True)                  #Set TRIG as HIGH
  time.sleep(0.00001)                      #Delay of 0.00001 seconds
  GPIO.output(TRIG, False)                 #Set TRIG as LOW

  while GPIO.input(ECHO)==0:               #Check whether the ECHO is LOW
    pulse_start = time.time()              #Saves the last known time of LOW pulse

  while GPIO.input(ECHO)==1:               #Check whether the ECHO is HIGH
    pulse_end = time.time()                #Saves the last known time of HIGH pulse 

  pulse_duration = pulse_end - pulse_start #Get pulse duration to a variable
  
  #GPIO.output(trig2, False)
  #time.sleep(.1)
  
  GPIO.output(trig2, True)                  #Set TRIG as HIGH
  time.sleep(0.00001)                      #Delay of 0.00001 seconds
  GPIO.output(trig2, False)   #Set TRIG as LOW
  
  while GPIO.input(echo2)==0:               #Check whether the ECHO is LOW
    pulse_start2 = time.time()              #Saves the last known time of LOW pulse

  while GPIO.input(echo2)==1:               #Check whether the ECHO is HIGH
    pulse_end2 = time.time()                #Saves the last known time of HIGH pulse 

  pulse_duration2 = pulse_end2 - pulse_start2 #Get pulse duration to a variable

  distance = pulse_duration * 17150        #Multiply pulse duration by 17150 to get distance
  distance = round(distance, 2)  #Round to two decimal points
  #print(distance)
  distance2 = pulse_duration2 * 17150        #Multiply pulse duration by 17150 to get distance
  distance2 = round(distance2, 2)
  
  if distance < 60:      #Check whether the distance is within range
    #print ("Distance:",distance - 0.5,"cm")  #Print distance with 0.5 cm calibration
    #s.send('goright'.encode())
    #data = s.recv(BUFFER_SIZE)
    #print ("received data:", data)          #for testing
    print('too close left ', '', distance)
  elif distance2 < 60:
      print('too close right', '', distance2)
      #s.send('goleft'.encode())
      #data = s.recv(BUFFER_SIZE)
  else:
    s.send('GOOD'.encode())        
    #data = s.recv(BUFFER_SIZE)
    #print ("received data:", data)
    print('good ', distance,'', distance2)






